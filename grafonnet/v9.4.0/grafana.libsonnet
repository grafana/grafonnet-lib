// Generated with `make static-v9.4.0.libsonnet`
{ annolist+: { withLimit(value=10): { limit: value },
withNavigateAfter(value="10m"): { navigateAfter: value },
withNavigateBefore(value="10m"): { navigateBefore: value },
withNavigateToPanel(value=true): { navigateToPanel: value },
withOnlyFromThisDashboard(value=false): { onlyFromThisDashboard: value },
withOnlyInTimeRange(value=false): { onlyInTimeRange: value },
withShowTags(value=true): { showTags: value },
withShowTime(value=true): { showTime: value },
withShowUser(value=true): { showUser: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
 },
 }{ barchart+: { withBarRadius(value=0): { barRadius: value },
withBarWidth(value=0.96999999999999997): { barWidth: value },
withColorByField(value): { colorByField: value },
withGroupWidth(value=0.69999999999999996): { groupWidth: value },
withOrientation(value): { orientation: value },
withShowValue(value): { showValue: value },
withStacking(value): { stacking: value },
withXField(value): { xField: value },
withXTickLabelMaxLength(value): { xTickLabelMaxLength: value },
withXTickLabelRotation(value=0): { xTickLabelRotation: value },
withXTickLabelSpacing(value=0): { xTickLabelSpacing: value },
OptionsWithLegend+: { withLegend(value): { legend: value },
withLegendMixin(value): { legend+: value },
legend+: { withAsTable(value=true): { legend+: { asTable: value } },
withCalcs(value): { legend+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { legend+: {  calcs+: if std.isArray(value) then value else [value]  } },
withDisplayMode(value): { legend+: { displayMode: value } },
withIsVisible(value=true): { legend+: { isVisible: value } },
withPlacement(value): { legend+: { placement: value } },
withShowLegend(value=true): { legend+: { showLegend: value } },
withSortBy(value): { legend+: { sortBy: value } },
withSortDesc(value=true): { legend+: { sortDesc: value } },
withWidth(value): { legend+: { width: value } },
 },
 },
OptionsWithTooltip+: { withTooltip(value): { tooltip: value },
withTooltipMixin(value): { tooltip+: value },
tooltip+: { withMode(value): { tooltip+: { mode: value } },
withSort(value): { tooltip+: { sort: value } },
 },
 },
OptionsWithTextFormatting+: { withText(value): { text: value },
withTextMixin(value): { text+: value },
text+: { withTitleSize(value): { text+: { titleSize: value } },
withValueSize(value): { text+: { valueSize: value } },
 },
 },
 },
 }{ bargauge+: { withDisplayMode(value): { displayMode: value },
withMinVizHeight(value=10): { minVizHeight: value },
withMinVizWidth(value=0): { minVizWidth: value },
withShowUnfilled(value=true): { showUnfilled: value },
SingleStatBaseOptions+: { withOrientation(value): { orientation: value },
withReduceOptions(value): { reduceOptions: value },
withReduceOptionsMixin(value): { reduceOptions+: value },
reduceOptions+: { withCalcs(value): { reduceOptions+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { reduceOptions+: {  calcs+: if std.isArray(value) then value else [value]  } },
withFields(value): { reduceOptions+: { fields: value } },
withLimit(value): { reduceOptions+: { limit: value } },
withValues(value=true): { reduceOptions+: { values: value } },
 },
OptionsWithTextFormatting+: { withText(value): { text: value },
withTextMixin(value): { text+: value },
text+: { withTitleSize(value): { text+: { titleSize: value } },
withValueSize(value): { text+: { valueSize: value } },
 },
 },
 },
 },
 }{ dashboard+: { withAnnotations(value): { annotations: value },
withAnnotationsMixin(value): { annotations+: value },
annotations+: { withList(value): { annotations+: {  list: if std.isArray(value) then value else [value]  } },
withListMixin(value): { annotations+: {  list+: if std.isArray(value) then value else [value]  } },
list+: { withBuiltIn(value=0): { annotations+: { builtIn: value } },
withDatasource(value): { annotations+: { datasource: value } },
withDatasourceMixin(value): { annotations+: { datasource+: value } },
datasource+: { withType(value): { annotations+: { datasource+: { type: value } } },
withUid(value): { annotations+: { datasource+: { uid: value } } },
 },
withEnable(value=true): { annotations+: { enable: value } },
withHide(value=false): { annotations+: { hide: value } },
withIconColor(value): { annotations+: { iconColor: value } },
withName(value): { annotations+: { name: value } },
withRawQuery(value): { annotations+: { rawQuery: value } },
withShowIn(value=0): { annotations+: { showIn: value } },
withTarget(value): { annotations+: { target: value } },
withTargetMixin(value): { annotations+: { target+: value } },
target+: { withLimit(value): { annotations+: { target+: { limit: value } } },
withMatchAny(value=true): { annotations+: { target+: { matchAny: value } } },
withTags(value): { annotations+: { target+: {  tags: if std.isArray(value) then value else [value]  } } },
withTagsMixin(value): { annotations+: { target+: {  tags+: if std.isArray(value) then value else [value]  } } },
withType(value): { annotations+: { target+: { type: value } } },
 },
withType(value="dashboard"): { annotations+: { type: value } },
 },
 },
withDescription(value): { description: value },
withEditable(value=true): { editable: value },
withFiscalYearStartMonth(value): { fiscalYearStartMonth: value },
withGnetId(value): { gnetId: value },
withGraphTooltip(value=0): { graphTooltip: value },
withId(value): { id: value },
withLinks(value): {  links: if std.isArray(value) then value else [value]  },
withLinksMixin(value): {  links+: if std.isArray(value) then value else [value]  },
links+: { withAsDropdown(value=false): { asDropdown: value },
withIcon(value): { icon: value },
withIncludeVars(value=false): { includeVars: value },
withKeepTime(value=false): { keepTime: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTargetBlank(value=false): { targetBlank: value },
withTitle(value): { title: value },
withTooltip(value): { tooltip: value },
withType(value): { type: value },
withUrl(value): { url: value },
 },
withLiveNow(value=true): { liveNow: value },
withPanels(value): {  panels: if std.isArray(value) then value else [value]  },
withPanelsMixin(value): {  panels+: if std.isArray(value) then value else [value]  },
panels+: { Panel+: { withDatasource(value): { datasource: value },
withDatasourceMixin(value): { datasource+: value },
datasource+: { withType(value): { datasource+: { type: value } },
withUid(value): { datasource+: { uid: value } },
 },
withDescription(value): { description: value },
withFieldConfig(value): { fieldConfig: value },
withFieldConfigMixin(value): { fieldConfig+: value },
fieldConfig+: { withDefaults(value): { fieldConfig+: { defaults: value } },
withDefaultsMixin(value): { fieldConfig+: { defaults+: value } },
defaults+: { withColor(value): { fieldConfig+: { defaults+: { color: value } } },
withColorMixin(value): { fieldConfig+: { defaults+: { color+: value } } },
color+: { withFixedColor(value): { fieldConfig+: { defaults+: { color+: { fixedColor: value } } } },
withMode(value): { fieldConfig+: { defaults+: { color+: { mode: value } } } },
withSeriesBy(value): { fieldConfig+: { defaults+: { color+: { seriesBy: value } } } },
 },
withCustom(value): { fieldConfig+: { defaults+: { custom: value } } },
withCustomMixin(value): { fieldConfig+: { defaults+: { custom+: value } } },
withDecimals(value): { fieldConfig+: { defaults+: { decimals: value } } },
withDescription(value): { fieldConfig+: { defaults+: { description: value } } },
withDisplayName(value): { fieldConfig+: { defaults+: { displayName: value } } },
withDisplayNameFromDS(value): { fieldConfig+: { defaults+: { displayNameFromDS: value } } },
withFilterable(value=true): { fieldConfig+: { defaults+: { filterable: value } } },
withLinks(value): { fieldConfig+: { defaults+: {  links: if std.isArray(value) then value else [value]  } } },
withLinksMixin(value): { fieldConfig+: { defaults+: {  links+: if std.isArray(value) then value else [value]  } } },
withMappings(value): { fieldConfig+: { defaults+: {  mappings: if std.isArray(value) then value else [value]  } } },
withMappingsMixin(value): { fieldConfig+: { defaults+: {  mappings+: if std.isArray(value) then value else [value]  } } },
mappings+: { withValueMap(value): { fieldConfig+: { defaults+: { ValueMap: value } } },
withValueMapMixin(value): { fieldConfig+: { defaults+: { ValueMap+: value } } },
ValueMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withRangeMap(value): { fieldConfig+: { defaults+: { RangeMap: value } } },
withRangeMapMixin(value): { fieldConfig+: { defaults+: { RangeMap+: value } } },
RangeMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withFrom(value): { fieldConfig+: { defaults+: { options+: { from: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
withTo(value): { fieldConfig+: { defaults+: { options+: { to: value } } } },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withRegexMap(value): { fieldConfig+: { defaults+: { RegexMap: value } } },
withRegexMapMixin(value): { fieldConfig+: { defaults+: { RegexMap+: value } } },
RegexMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withPattern(value): { fieldConfig+: { defaults+: { options+: { pattern: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withSpecialValueMap(value): { fieldConfig+: { defaults+: { SpecialValueMap: value } } },
withSpecialValueMapMixin(value): { fieldConfig+: { defaults+: { SpecialValueMap+: value } } },
SpecialValueMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withMatch(value): { fieldConfig+: { defaults+: { options+: { match: value } } } },
withPattern(value): { fieldConfig+: { defaults+: { options+: { pattern: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
 },
withMax(value): { fieldConfig+: { defaults+: { max: value } } },
withMin(value): { fieldConfig+: { defaults+: { min: value } } },
withNoValue(value): { fieldConfig+: { defaults+: { noValue: value } } },
withPath(value): { fieldConfig+: { defaults+: { path: value } } },
withThresholds(value): { fieldConfig+: { defaults+: { thresholds: value } } },
withThresholdsMixin(value): { fieldConfig+: { defaults+: { thresholds+: value } } },
thresholds+: { withMode(value): { fieldConfig+: { defaults+: { thresholds+: { mode: value } } } },
withSteps(value): { fieldConfig+: { defaults+: { thresholds+: {  steps: if std.isArray(value) then value else [value]  } } } },
withStepsMixin(value): { fieldConfig+: { defaults+: { thresholds+: {  steps+: if std.isArray(value) then value else [value]  } } } },
steps+: { withColor(value): { fieldConfig+: { defaults+: { thresholds+: { color: value } } } },
withState(value): { fieldConfig+: { defaults+: { thresholds+: { state: value } } } },
withValue(value): { fieldConfig+: { defaults+: { thresholds+: { value: value } } } },
 },
 },
withUnit(value): { fieldConfig+: { defaults+: { unit: value } } },
withWriteable(value=true): { fieldConfig+: { defaults+: { writeable: value } } },
 },
withOverrides(value): { fieldConfig+: {  overrides: if std.isArray(value) then value else [value]  } },
withOverridesMixin(value): { fieldConfig+: {  overrides+: if std.isArray(value) then value else [value]  } },
overrides+: { withMatcher(value): { fieldConfig+: { matcher: value } },
withMatcherMixin(value): { fieldConfig+: { matcher+: value } },
matcher+: { withId(value=""): { fieldConfig+: { matcher+: { id: value } } },
withOptions(value): { fieldConfig+: { matcher+: { options: value } } },
 },
withProperties(value): { fieldConfig+: {  properties: if std.isArray(value) then value else [value]  } },
withPropertiesMixin(value): { fieldConfig+: {  properties+: if std.isArray(value) then value else [value]  } },
properties+: { withId(value=""): { fieldConfig+: { id: value } },
withValue(value): { fieldConfig+: { value: value } },
 },
 },
 },
withGridPos(value): { gridPos: value },
withGridPosMixin(value): { gridPos+: value },
gridPos+: { withH(value=9): { gridPos+: { h: value } },
withStatic(value=true): { gridPos+: { static: value } },
withW(value=12): { gridPos+: { w: value } },
withX(value=0): { gridPos+: { x: value } },
withY(value=0): { gridPos+: { y: value } },
 },
withId(value): { id: value },
withInterval(value): { interval: value },
withLinks(value): {  links: if std.isArray(value) then value else [value]  },
withLinksMixin(value): {  links+: if std.isArray(value) then value else [value]  },
links+: { withAsDropdown(value=false): { asDropdown: value },
withIcon(value): { icon: value },
withIncludeVars(value=false): { includeVars: value },
withKeepTime(value=false): { keepTime: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTargetBlank(value=false): { targetBlank: value },
withTitle(value): { title: value },
withTooltip(value): { tooltip: value },
withType(value): { type: value },
withUrl(value): { url: value },
 },
withMaxDataPoints(value): { maxDataPoints: value },
withOptions(value): { options: value },
withOptionsMixin(value): { options+: value },
withPluginVersion(value): { pluginVersion: value },
withRepeat(value): { repeat: value },
withRepeatDirection(value="h"): { repeatDirection: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTargets(value): {  targets: if std.isArray(value) then value else [value]  },
withTargetsMixin(value): {  targets+: if std.isArray(value) then value else [value]  },
withThresholds(value): {  thresholds: if std.isArray(value) then value else [value]  },
withThresholdsMixin(value): {  thresholds+: if std.isArray(value) then value else [value]  },
withTimeFrom(value): { timeFrom: value },
withTimeRegions(value): {  timeRegions: if std.isArray(value) then value else [value]  },
withTimeRegionsMixin(value): {  timeRegions+: if std.isArray(value) then value else [value]  },
withTimeShift(value): { timeShift: value },
withTitle(value): { title: value },
withTransformations(value): {  transformations: if std.isArray(value) then value else [value]  },
withTransformationsMixin(value): {  transformations+: if std.isArray(value) then value else [value]  },
transformations+: { withId(value): { id: value },
withOptions(value): { options: value },
withOptionsMixin(value): { options+: value },
 },
withTransparent(value=false): { transparent: value },
withType(value): { type: value },
 },
RowPanel+: { withCollapsed(value=false): { collapsed: value },
withDatasource(value): { datasource: value },
withDatasourceMixin(value): { datasource+: value },
datasource+: { withType(value): { datasource+: { type: value } },
withUid(value): { datasource+: { uid: value } },
 },
withGridPos(value): { gridPos: value },
withGridPosMixin(value): { gridPos+: value },
gridPos+: { withH(value=9): { gridPos+: { h: value } },
withStatic(value=true): { gridPos+: { static: value } },
withW(value=12): { gridPos+: { w: value } },
withX(value=0): { gridPos+: { x: value } },
withY(value=0): { gridPos+: { y: value } },
 },
withId(value): { id: value },
withPanels(value): {  panels: if std.isArray(value) then value else [value]  },
withPanelsMixin(value): {  panels+: if std.isArray(value) then value else [value]  },
panels+: { Panel+: { withDatasource(value): { datasource: value },
withDatasourceMixin(value): { datasource+: value },
datasource+: { withType(value): { datasource+: { type: value } },
withUid(value): { datasource+: { uid: value } },
 },
withDescription(value): { description: value },
withFieldConfig(value): { fieldConfig: value },
withFieldConfigMixin(value): { fieldConfig+: value },
fieldConfig+: { withDefaults(value): { fieldConfig+: { defaults: value } },
withDefaultsMixin(value): { fieldConfig+: { defaults+: value } },
defaults+: { withColor(value): { fieldConfig+: { defaults+: { color: value } } },
withColorMixin(value): { fieldConfig+: { defaults+: { color+: value } } },
color+: { withFixedColor(value): { fieldConfig+: { defaults+: { color+: { fixedColor: value } } } },
withMode(value): { fieldConfig+: { defaults+: { color+: { mode: value } } } },
withSeriesBy(value): { fieldConfig+: { defaults+: { color+: { seriesBy: value } } } },
 },
withCustom(value): { fieldConfig+: { defaults+: { custom: value } } },
withCustomMixin(value): { fieldConfig+: { defaults+: { custom+: value } } },
withDecimals(value): { fieldConfig+: { defaults+: { decimals: value } } },
withDescription(value): { fieldConfig+: { defaults+: { description: value } } },
withDisplayName(value): { fieldConfig+: { defaults+: { displayName: value } } },
withDisplayNameFromDS(value): { fieldConfig+: { defaults+: { displayNameFromDS: value } } },
withFilterable(value=true): { fieldConfig+: { defaults+: { filterable: value } } },
withLinks(value): { fieldConfig+: { defaults+: {  links: if std.isArray(value) then value else [value]  } } },
withLinksMixin(value): { fieldConfig+: { defaults+: {  links+: if std.isArray(value) then value else [value]  } } },
withMappings(value): { fieldConfig+: { defaults+: {  mappings: if std.isArray(value) then value else [value]  } } },
withMappingsMixin(value): { fieldConfig+: { defaults+: {  mappings+: if std.isArray(value) then value else [value]  } } },
mappings+: { withValueMap(value): { fieldConfig+: { defaults+: { ValueMap: value } } },
withValueMapMixin(value): { fieldConfig+: { defaults+: { ValueMap+: value } } },
ValueMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withRangeMap(value): { fieldConfig+: { defaults+: { RangeMap: value } } },
withRangeMapMixin(value): { fieldConfig+: { defaults+: { RangeMap+: value } } },
RangeMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withFrom(value): { fieldConfig+: { defaults+: { options+: { from: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
withTo(value): { fieldConfig+: { defaults+: { options+: { to: value } } } },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withRegexMap(value): { fieldConfig+: { defaults+: { RegexMap: value } } },
withRegexMapMixin(value): { fieldConfig+: { defaults+: { RegexMap+: value } } },
RegexMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withPattern(value): { fieldConfig+: { defaults+: { options+: { pattern: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
withSpecialValueMap(value): { fieldConfig+: { defaults+: { SpecialValueMap: value } } },
withSpecialValueMapMixin(value): { fieldConfig+: { defaults+: { SpecialValueMap+: value } } },
SpecialValueMap+: { withOptions(value): { fieldConfig+: { defaults+: { options: value } } },
withOptionsMixin(value): { fieldConfig+: { defaults+: { options+: value } } },
options+: { withMatch(value): { fieldConfig+: { defaults+: { options+: { match: value } } } },
withPattern(value): { fieldConfig+: { defaults+: { options+: { pattern: value } } } },
withResult(value): { fieldConfig+: { defaults+: { options+: { result: value } } } },
withResultMixin(value): { fieldConfig+: { defaults+: { options+: { result+: value } } } },
result+: { withColor(value): { fieldConfig+: { defaults+: { options+: { result+: { color: value } } } } },
withIcon(value): { fieldConfig+: { defaults+: { options+: { result+: { icon: value } } } } },
withIndex(value): { fieldConfig+: { defaults+: { options+: { result+: { index: value } } } } },
withText(value): { fieldConfig+: { defaults+: { options+: { result+: { text: value } } } } },
 },
 },
withType(value): { fieldConfig+: { defaults+: { type: value } } },
 },
 },
withMax(value): { fieldConfig+: { defaults+: { max: value } } },
withMin(value): { fieldConfig+: { defaults+: { min: value } } },
withNoValue(value): { fieldConfig+: { defaults+: { noValue: value } } },
withPath(value): { fieldConfig+: { defaults+: { path: value } } },
withThresholds(value): { fieldConfig+: { defaults+: { thresholds: value } } },
withThresholdsMixin(value): { fieldConfig+: { defaults+: { thresholds+: value } } },
thresholds+: { withMode(value): { fieldConfig+: { defaults+: { thresholds+: { mode: value } } } },
withSteps(value): { fieldConfig+: { defaults+: { thresholds+: {  steps: if std.isArray(value) then value else [value]  } } } },
withStepsMixin(value): { fieldConfig+: { defaults+: { thresholds+: {  steps+: if std.isArray(value) then value else [value]  } } } },
steps+: { withColor(value): { fieldConfig+: { defaults+: { thresholds+: { color: value } } } },
withState(value): { fieldConfig+: { defaults+: { thresholds+: { state: value } } } },
withValue(value): { fieldConfig+: { defaults+: { thresholds+: { value: value } } } },
 },
 },
withUnit(value): { fieldConfig+: { defaults+: { unit: value } } },
withWriteable(value=true): { fieldConfig+: { defaults+: { writeable: value } } },
 },
withOverrides(value): { fieldConfig+: {  overrides: if std.isArray(value) then value else [value]  } },
withOverridesMixin(value): { fieldConfig+: {  overrides+: if std.isArray(value) then value else [value]  } },
overrides+: { withMatcher(value): { fieldConfig+: { matcher: value } },
withMatcherMixin(value): { fieldConfig+: { matcher+: value } },
matcher+: { withId(value=""): { fieldConfig+: { matcher+: { id: value } } },
withOptions(value): { fieldConfig+: { matcher+: { options: value } } },
 },
withProperties(value): { fieldConfig+: {  properties: if std.isArray(value) then value else [value]  } },
withPropertiesMixin(value): { fieldConfig+: {  properties+: if std.isArray(value) then value else [value]  } },
properties+: { withId(value=""): { fieldConfig+: { id: value } },
withValue(value): { fieldConfig+: { value: value } },
 },
 },
 },
withGridPos(value): { gridPos: value },
withGridPosMixin(value): { gridPos+: value },
gridPos+: { withH(value=9): { gridPos+: { h: value } },
withStatic(value=true): { gridPos+: { static: value } },
withW(value=12): { gridPos+: { w: value } },
withX(value=0): { gridPos+: { x: value } },
withY(value=0): { gridPos+: { y: value } },
 },
withId(value): { id: value },
withInterval(value): { interval: value },
withLinks(value): {  links: if std.isArray(value) then value else [value]  },
withLinksMixin(value): {  links+: if std.isArray(value) then value else [value]  },
links+: { withAsDropdown(value=false): { asDropdown: value },
withIcon(value): { icon: value },
withIncludeVars(value=false): { includeVars: value },
withKeepTime(value=false): { keepTime: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTargetBlank(value=false): { targetBlank: value },
withTitle(value): { title: value },
withTooltip(value): { tooltip: value },
withType(value): { type: value },
withUrl(value): { url: value },
 },
withMaxDataPoints(value): { maxDataPoints: value },
withOptions(value): { options: value },
withOptionsMixin(value): { options+: value },
withPluginVersion(value): { pluginVersion: value },
withRepeat(value): { repeat: value },
withRepeatDirection(value="h"): { repeatDirection: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTargets(value): {  targets: if std.isArray(value) then value else [value]  },
withTargetsMixin(value): {  targets+: if std.isArray(value) then value else [value]  },
withThresholds(value): {  thresholds: if std.isArray(value) then value else [value]  },
withThresholdsMixin(value): {  thresholds+: if std.isArray(value) then value else [value]  },
withTimeFrom(value): { timeFrom: value },
withTimeRegions(value): {  timeRegions: if std.isArray(value) then value else [value]  },
withTimeRegionsMixin(value): {  timeRegions+: if std.isArray(value) then value else [value]  },
withTimeShift(value): { timeShift: value },
withTitle(value): { title: value },
withTransformations(value): {  transformations: if std.isArray(value) then value else [value]  },
withTransformationsMixin(value): {  transformations+: if std.isArray(value) then value else [value]  },
transformations+: { withId(value): { id: value },
withOptions(value): { options: value },
withOptionsMixin(value): { options+: value },
 },
withTransparent(value=false): { transparent: value },
withType(value): { type: value },
 },
GraphPanel+: { withType(value): { type: value },
 },
HeatmapPanel+: { withType(value): { type: value },
 },
 },
withRepeat(value): { repeat: value },
withTitle(value): { title: value },
withType(value): { type: value },
 },
GraphPanel+: { withType(value): { type: value },
 },
HeatmapPanel+: { withType(value): { type: value },
 },
 },
withRefresh(value): { refresh: value },
withRefreshMixin(value): { refresh+: value },
withSchemaVersion(value=36): { schemaVersion: value },
withStyle(value="dark"): { style: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
withTemplating(value): { templating: value },
withTemplatingMixin(value): { templating+: value },
templating+: { withList(value): { templating+: {  list: if std.isArray(value) then value else [value]  } },
withListMixin(value): { templating+: {  list+: if std.isArray(value) then value else [value]  } },
list+: { withLabel(value): { templating+: { label: value } },
withName(value): { templating+: { name: value } },
withType(value): { templating+: { type: value } },
 },
 },
withTime(value): { time: value },
withTimeMixin(value): { time+: value },
time+: { withFrom(value="now-6h"): { time+: { from: value } },
withTo(value="now"): { time+: { to: value } },
 },
withTimepicker(value): { timepicker: value },
withTimepickerMixin(value): { timepicker+: value },
timepicker+: { withCollapse(value=false): { timepicker+: { collapse: value } },
withEnable(value=true): { timepicker+: { enable: value } },
withHidden(value=false): { timepicker+: { hidden: value } },
withRefreshIntervals(value): { timepicker+: {  refresh_intervals: if std.isArray(value) then value else [value]  } },
withRefreshIntervalsMixin(value): { timepicker+: {  refresh_intervals+: if std.isArray(value) then value else [value]  } },
withTimeOptions(value): { timepicker+: {  time_options: if std.isArray(value) then value else [value]  } },
withTimeOptionsMixin(value): { timepicker+: {  time_options+: if std.isArray(value) then value else [value]  } },
 },
withTimezone(value="browser"): { timezone: value },
withTitle(value): { title: value },
withUid(value): { uid: value },
withVersion(value): { version: value },
withWeekStart(value): { weekStart: value },
 },
 }{ dashlist+: { withFolderId(value): { folderId: value },
withLayout(value): { layout: value },
withMaxItems(value=10): { maxItems: value },
withQuery(value=""): { query: value },
withShowHeadings(value=true): { showHeadings: value },
withShowRecentlyViewed(value=false): { showRecentlyViewed: value },
withShowSearch(value=false): { showSearch: value },
withShowStarred(value=true): { showStarred: value },
withTags(value): {  tags: if std.isArray(value) then value else [value]  },
withTagsMixin(value): {  tags+: if std.isArray(value) then value else [value]  },
 },
 }{ gauge+: { withShowThresholdLabels(value=false): { showThresholdLabels: value },
withShowThresholdMarkers(value=true): { showThresholdMarkers: value },
SingleStatBaseOptions+: { withOrientation(value): { orientation: value },
withReduceOptions(value): { reduceOptions: value },
withReduceOptionsMixin(value): { reduceOptions+: value },
reduceOptions+: { withCalcs(value): { reduceOptions+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { reduceOptions+: {  calcs+: if std.isArray(value) then value else [value]  } },
withFields(value): { reduceOptions+: { fields: value } },
withLimit(value): { reduceOptions+: { limit: value } },
withValues(value=true): { reduceOptions+: { values: value } },
 },
OptionsWithTextFormatting+: { withText(value): { text: value },
withTextMixin(value): { text+: value },
text+: { withTitleSize(value): { text+: { titleSize: value } },
withValueSize(value): { text+: { valueSize: value } },
 },
 },
 },
 },
 }{ histogram+: { withBucketOffset(value=0): { bucketOffset: value },
withBucketSize(value): { bucketSize: value },
withCombine(value=true): { combine: value },
OptionsWithLegend+: { withLegend(value): { legend: value },
withLegendMixin(value): { legend+: value },
legend+: { withAsTable(value=true): { legend+: { asTable: value } },
withCalcs(value): { legend+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { legend+: {  calcs+: if std.isArray(value) then value else [value]  } },
withDisplayMode(value): { legend+: { displayMode: value } },
withIsVisible(value=true): { legend+: { isVisible: value } },
withPlacement(value): { legend+: { placement: value } },
withShowLegend(value=true): { legend+: { showLegend: value } },
withSortBy(value): { legend+: { sortBy: value } },
withSortDesc(value=true): { legend+: { sortDesc: value } },
withWidth(value): { legend+: { width: value } },
 },
 },
OptionsWithTooltip+: { withTooltip(value): { tooltip: value },
withTooltipMixin(value): { tooltip+: value },
tooltip+: { withMode(value): { tooltip+: { mode: value } },
withSort(value): { tooltip+: { sort: value } },
 },
 },
 },
 }{ news+: { withFeedUrl(value): { feedUrl: value },
withShowImage(value=true): { showImage: value },
 },
 }{ piechart+: { withDisplayLabels(value): {  displayLabels: if std.isArray(value) then value else [value]  },
withDisplayLabelsMixin(value): {  displayLabels+: if std.isArray(value) then value else [value]  },
withLegend(value): { legend: value },
withLegendMixin(value): { legend+: value },
legend+: { withValues(value): { legend+: {  values: if std.isArray(value) then value else [value]  } },
withValuesMixin(value): { legend+: {  values+: if std.isArray(value) then value else [value]  } },
withVizLegendOptions(value): { legend+: { VizLegendOptions: value } },
withVizLegendOptionsMixin(value): { legend+: { VizLegendOptions+: value } },
VizLegendOptions+: { withAsTable(value=true): { legend+: { asTable: value } },
withCalcs(value): { legend+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { legend+: {  calcs+: if std.isArray(value) then value else [value]  } },
withDisplayMode(value): { legend+: { displayMode: value } },
withIsVisible(value=true): { legend+: { isVisible: value } },
withPlacement(value): { legend+: { placement: value } },
withShowLegend(value=true): { legend+: { showLegend: value } },
withSortBy(value): { legend+: { sortBy: value } },
withSortDesc(value=true): { legend+: { sortDesc: value } },
withWidth(value): { legend+: { width: value } },
 },
 },
withPieType(value): { pieType: value },
OptionsWithTooltip+: { withTooltip(value): { tooltip: value },
withTooltipMixin(value): { tooltip+: value },
tooltip+: { withMode(value): { tooltip+: { mode: value } },
withSort(value): { tooltip+: { sort: value } },
 },
 },
SingleStatBaseOptions+: { withOrientation(value): { orientation: value },
withReduceOptions(value): { reduceOptions: value },
withReduceOptionsMixin(value): { reduceOptions+: value },
reduceOptions+: { withCalcs(value): { reduceOptions+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { reduceOptions+: {  calcs+: if std.isArray(value) then value else [value]  } },
withFields(value): { reduceOptions+: { fields: value } },
withLimit(value): { reduceOptions+: { limit: value } },
withValues(value=true): { reduceOptions+: { values: value } },
 },
OptionsWithTextFormatting+: { withText(value): { text: value },
withTextMixin(value): { text+: value },
text+: { withTitleSize(value): { text+: { titleSize: value } },
withValueSize(value): { text+: { valueSize: value } },
 },
 },
 },
 },
 }{ playlist+: { withInterval(value="5m"): { interval: value },
withItems(value): {  items: if std.isArray(value) then value else [value]  },
withItemsMixin(value): {  items+: if std.isArray(value) then value else [value]  },
items+: { withTitle(value): { title: value },
withType(value): { type: value },
withValue(value): { value: value },
 },
withName(value): { name: value },
withUid(value): { uid: value },
 },
 }{ stat+: { withColorMode(value): { colorMode: value },
withGraphMode(value): { graphMode: value },
withJustifyMode(value): { justifyMode: value },
withTextMode(value): { textMode: value },
SingleStatBaseOptions+: { withOrientation(value): { orientation: value },
withReduceOptions(value): { reduceOptions: value },
withReduceOptionsMixin(value): { reduceOptions+: value },
reduceOptions+: { withCalcs(value): { reduceOptions+: {  calcs: if std.isArray(value) then value else [value]  } },
withCalcsMixin(value): { reduceOptions+: {  calcs+: if std.isArray(value) then value else [value]  } },
withFields(value): { reduceOptions+: { fields: value } },
withLimit(value): { reduceOptions+: { limit: value } },
withValues(value=true): { reduceOptions+: { values: value } },
 },
OptionsWithTextFormatting+: { withText(value): { text: value },
withTextMixin(value): { text+: value },
text+: { withTitleSize(value): { text+: { titleSize: value } },
withValueSize(value): { text+: { valueSize: value } },
 },
 },
 },
 },
 }{ team+: { withAccessControl(value): { accessControl: value },
withAccessControlMixin(value): { accessControl+: value },
withAvatarUrl(value): { avatarUrl: value },
withCreated(value): { created: value },
withEmail(value): { email: value },
withMemberCount(value): { memberCount: value },
withName(value): { name: value },
withOrgId(value): { orgId: value },
withPermission(value): { permission: value },
withUpdated(value): { updated: value },
 },
 }{ text+: { withCode(value): { code: value },
withCodeMixin(value): { code+: value },
code+: { withLanguage(value="plaintext"): { code+: { language: value } },
withShowLineNumbers(value=false): { code+: { showLineNumbers: value } },
withShowMiniMap(value=false): { code+: { showMiniMap: value } },
 },
withContent(value="# Title

For markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)"): { content: value },
withMode(value): { mode: value },
 },
 }
+ (import 'veneer.libsonnet')
